---
title: "Homework 2"
author: "Giovanni Lunetta"
date: "February 2, 2023"
format:
  html:
    code-fold: true
  pdf: 
    geometry: 
      - top=30mm
      - left=20mm
jupyter: python3
---

```{python}
import sys
print(sys.executable)
```

# Exercise 3
Monty Hall problem through simulation.

```{python}
import random

# defines a function called monty_hall which takes two arguments: ndoors 
# represents the number of doors in the experiment and ntrials represents 
# the number of trials in the simulation.
def monty_hall(ndoors, ntrials):

    # initialize two variables, switch_wins and no_switch_wins, to keep track 
    # of the number of wins for each strategy (switching or not switching).
    switch_wins = 0
    no_switch_wins = 0

    # this line starts a for loop that will run for ntrials iterations.
    for i in range(ntrials):

        # create a list of ndoors doors represented by integers from 0 to ndoors-1, 
        # then randomly choose one of these doors and assign it to car (which 
        # represents the door with the car behind it), and finally randomly choose 
        # another door and assign it to choice (which represents the door that the 
        # contestant initially chooses).
        doors = [i for i in range(ndoors)]
        car = random.choice(doors)
        choice = random.choice(doors)

        # creates a new list available_doors that contains all doors except the 
        # one initially chosen by the contestant. this is to ensure that the host 
        # can choose a goat door that is different from the door initially 
        # chosen by the contestant.
        available_doors = [d for d in doors if d != choice]

        # creates a variable goat that represents the door that the host has chosen 
        # to open. this line of code selects a door from the available_doors list, 
        # but it specifically chooses a door that is not the door with the car. 
        # this is because the host always opens a goat door in the monty hall problem.
        goat = random.choice([d for d in available_doors if d != car])

        # check if the door the contestant initially chose is the door with the car 
        # behind it. If it is, the no_switch_wins counter is increased by 1 
        # (representing a win for the no-switch strategy), otherwise the switch_wins 
        # counter is increased by 1 (representing a win for the switch strategy).
        if choice == car:
            no_switch_wins += 1
        else:
            switch_wins += 1

    # this line returns the proportion of wins for the switch strategy.
    return switch_wins/ntrials

# stores the percentages in two different variables
win3 = monty_hall(3, 1000)*100
win5 = monty_hall(5, 1000)*100

print("When there are three doors, switching the door wins {:.2f}% of the time and staying wins {:.2f}% of the time.\n".format(win3, 100-win3))
print("When there are five doors, switching the door wins {:.2f}% of the time and staying wins {:.2f}% of the time.".format(win5, 100-win5))

```

# Exercise 4
Monte Carlo approximation of pi.
```{python}
import numpy as np

def monte_carlo_pi(n):

    # this line generates n pairs of random x, y values between -1 and 1 
    # using numpy's random.uniform method. the pairs are stored in a numpy 
    # array with shape (n, 2). the line then calculates the sum of the squares 
    # of each pair, and returns a 1-dimensional array of length n. the line 
    # then sums the elements of this array that are less than or equal to 1, 
    # and assigns the result to the inside variable. this inside variable keeps 
    # track of the number of points within the unit circle.
    inside = np.sum((np.random.uniform(-1, 1, size=(n, 2))**2).sum(axis=1) <= 1)

    # this line calculates the estimate of pi by multiplying the ratio of points 
    # inside the unit circle to the total number of points generated by 4.
    pi_estimate = 4 * inside / n

    # this line calculates the standard deviation of the estimate of pi, and then 
    # multiplies it by 1.96, which corresponds to the 95% confidence interval.
    pi_error = 1.96 * (4 * inside / n * (1 - inside / n) / n)**0.5

    # this line returns the estimate of pi and the 95% confidence interval as a tuple.
    return pi_estimate, (pi_estimate - pi_error, pi_estimate + pi_error)

print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 1000:", monte_carlo_pi(1000))
print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 2000:", monte_carlo_pi(2000))
print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 4000:", monte_carlo_pi(4000))
print("Displayed is the estimate, followed by the 95% confidence interval")
print("with a sample size of 8000:", monte_carlo_pi(8000))
```

# Exercise 5
Find the first 10-digit prime number occurring in consecutive digits of pi.
```{python}
# importing these libraries allows us to use arbitrary-precision decimal 
# arithmetic and prime numbers
import decimal
from sympy import isprime

# defines the proper function
def find_10_digit_prime_in_e():

    # sets the precision of the decimal module to 10000, 
    # meaning that we will be working with 10000 decimal digits of e
    decimal.getcontext().prec = 10000

    # use the built-in function in python's decimal module to compute
    #  the value of e and store it in a variable e
    e = decimal.Decimal(1).exp()

    # convert the value of e to a string
    e = str(e)

    # remove the decimal point from the string representation of e
    e = e.replace(".", "")

    # starts a for loop that will run once for each possible starting 
    # index of a 10-digit sequence in the string e
    for i in range(len(e) - 10):

        # creates a variable named num that is set 
        # to the 10-digit sequence
        # starting at index i of the string e
        num = int(e[i:i+10])

        # if the number is prime it returns the number
        if isprime(num):
            return num

print(find_10_digit_prime_in_e())
print("Help from:")
print("https://stackoverflow.com/")
print("https://math.stackexchange.com/")
```
