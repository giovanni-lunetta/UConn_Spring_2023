df <- read_dta("Ch2_Exercise1_DonutX.dta")
source("~/.active-rstudio-document", echo=TRUE)
View(df)
source("~/.active-rstudio-document", echo=TRUE)
View(df)
coef(model)
df <- read_dta("Ch7_Exercise1_Instability.dta")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
model2 <- lm(scale(instab) ~ scale(democracy) + scale(gdplag), data = data)
model2 <- lm(scale(instab) ~ scale(democracy) + scale(gdplag), data = df)
summary(model2)
model3 <- lm(scale(instab) ~ scale(democracy) + log(gdplag), data = df)
summary(model3)
exp(coef(model3)["log(gdplag)"]) - 1
model4 <- lm(scale(instab) ~ scale(democracy) + log(gdplag) + coldwar, data = df)
summary(model4)
df$logcoldwar <- log(df$coldwar + 1)
model5 <- lm(scale(instab) ~ scale(democracy) + log(gdplag) + logcoldwar, data = df)
summary(model5)
model5 <- lm(scale(instab) ~ scale(democracy) + log(gdplag) + log(coldwar), data = df)
df$democracy_sq <- df$democracy^2
model6 <- lm(scale(instab) ~ scale(democracy) + scale(democracy_sq) + log(gdplag), data = df)
summary(model6)
library(ggplot2)
ggplot(df, aes(x = democracy, y = instab)) +
geom_point() +
stat_smooth(method = "lm", formula = y ~ poly(x, 2), se = FALSE, color = "red") +
labs(x = "Democracy Score", y = "Instability Index", title = "Relationship between Democracy and Instability (Quadratic Model)")
# Find the vertex of the quadratic function
a <- coef(model6)[["scale(democracy_sq)"]]
b <- coef(model6)[["scale(democracy)"]]
x0 <- -b/(2*a)
y0 <- a*x0^2 + b*x0 + coef(model6)[["(Intercept)"]]
vertex <- data.frame(x0, y0)
# Print the vertex
vertex
# QUESTION 2
df2 <- read_dta("Ch12_Exercise2_Global_warming.dta")
model7 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = your_data)
# QUESTION 2
df2 <- read_dta("Ch12_Exercise2_Global_warming.dta")
model7 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = df2)
summary(model, robust = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(df2)
model7 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = df2)
summary(model7, robust = TRUE)
# create a data frame with the predictor variables
new_data <- data.frame(age = 35, educ = 14, male = 1, white = 1, party7 = 1, incomecat = 3)
# use the predict function to calculate the predicted value
yhat <- predict(model7, new_data)
# QUESTION 2
df2 <- read_dta("Ch12_Exercise2_Global_warming.dta")
model7 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = df2)
summary(model7, robust = TRUE)
# create a data frame with the predictor variables
new_data <- data.frame(age = 35, educ = 14, male = 1, white = 1, party7 = 1, incomecat = 3)
# use the predict function to calculate the predicted value
yhat <- predict(model7, new_data)
# create a data frame with the predictor variables
new_data <- data.frame(age = 35, agesq = 1225, educ = 14, male = 1, white = 1, party7 = 1, incomecat = 3)
# use the predict function to calculate the predicted value
yhat <- predict(model7, new_data)
# print the predicted value
print(yhat)
model8 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = df2)
model8_reduced <- lm(warmagreecontinuous ~ age + party7 + white + incomecat + male + educ, data = df2)
anova(model8_reduced, model8)
model8 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = df2)
model8_reduced <- lm(warmagreecontinuous ~ age + party7 + white + incomecat + male + educ, data = df2)
anova(model8_reduced, model8)
model7 <- lm(warmagreecontinuous ~ age + agesq + party7 + white + incomecat + male + educ, data = df2)
summary(model7, robust = TRUE)
a <- coef(model8)[["agesq"]]
b <- coef(model8)[["age"]]
x0 <- -b / (2*a)
y0 <- a*x0^2 + b*x0 + coef(model8)[["(Intercept)"]]
a <- coef(model8)[["agesq"]]
b <- coef(model8)[["age"]]
x0 <- -b / (2*a)
y0 <- a*x0^2 + b*x0 + coef(model8)[["(Intercept)"]]
vertex <- data.frame(x0, y0)
# Print the vertex
vertex
df3 <- read_dta("social_welfare_race(1).dta")
View(df3)
data1 <- read_dta("social_welfare_race(1).dta")
data2 <- read.csv("State House Partisanship 2010-22 - Sheet1.csv")
data2 <- read.csv("State House Partisanship 2010-22 - Sheet1.csv")
data2 <- read.csv("State House Partisanship 2010-22 - Sheet1.csv")
View(data2)
df3 <- merge(data1, data2[, c("state", "tot_average")], by = "state")
# QUESTION 3
data1 <- read_dta("social_welfare_race(1).dta")
data2 <- read.csv("State House Partisanship 2010-22 - Sheet1.csv")
df3 <- merge(data1, data2[, c("state", "tot_average")], by = "state")
df3 <- merge(data1, data2[, c("state", "tot_avg")], by = "state")
View(df3)
View(data1)
data1 <- read_dta("social_welfare_race(1).dta")
data2 <- read.csv("State House Partisanship 2010-22 - Sheet1.csv")
df3 <- merge(data1, data2[, c("state", "tot_avg")], by = "state")
df3 <- df3[df3$state != "Alaska",]
# regression model
model9 <- lm(welfare3 ~ tot_avg + minority_share + minwage_annual, data = df3)
summary(model9)
# scatterplot of welfare benefit against total average Republican share
ggplot(df3, aes(x = tot_avg, y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minority share
ggplot(df3, aes(x = minority_share, y = welfare3)) +
geom_point() +
labs(x = "Minority Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minimum wage
ggplot(df3, aes(x = minwage_annual, y = welfare3)) +
geom_point() +
labs(x = "Minimum Wage (Annual)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
ggplot(df3, aes(x = tot_avg, y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minority share
ggplot(df3, aes(x = minority_share, y = welfare3)) +
geom_point() +
labs(x = "Minority Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minimum wage
ggplot(df3, aes(x = minwage_annual, y = welfare3)) +
geom_point() +
labs(x = "Minimum Wage (Annual)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against total average Republican share
ggplot(df3, aes(x = tot_avg, y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minority share
ggplot(df3, aes(x = minority_share, y = welfare3)) +
geom_point() +
labs(x = "Minority Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minimum wage
ggplot(df3, aes(x = minwage_annual, y = welfare3)) +
geom_point() +
labs(x = "Minimum Wage (Annual)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# create a scaled version of the welfare3 variable
df$welfare_monthly <- df$welfare3 / 12
# scatterplot of welfare benefit against total average Republican share
ggplot(df3, aes(x = tot_avg, y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children", ylim = c(0, max(df3$welfare3)), xlim = c(0, 100))
# scatterplot of welfare benefit against total average Republican share
ggplot(df3, aes(x = scale(tot_avg), y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share (Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against total average Republican share
ggplot(df3, aes(x = scale(tot_avg), y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share (Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minority share
ggplot(df3, aes(x = scale(minority_share), y = welfare3)) +
geom_point() +
labs(x = "Minority Share (Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minimum wage
ggplot(df3, aes(x = scale(minwage_annual), y = welfare3)) +
geom_point() +
labs(x = "Minimum Wage (Annual, Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against total average Republican share
ggplot(df3, aes(x = scale(tot_avg), y = welfare3)) +
geom_point() +
labs(x = "Total Average Republican Share (Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minority share
ggplot(df3, aes(x = scale(minority_share), y = welfare3)) +
geom_point() +
labs(x = "Minority Share (Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# scatterplot of welfare benefit against minimum wage
ggplot(df3, aes(x = scale(minwage_annual), y = welfare3)) +
geom_point() +
labs(x = "Minimum Wage (Annual, Scaled)", y = "Maximum Monthly Welfare Payment for Single Parent with Two Children")
# quadratic transformation for tot_avg
df3$tot_avg_quad <- df3$tot_avg^2
# logarithmic transformation for minority_share
df3$minority_share_log <- log(df3$minority_share)
# linear model with slight logarithmic look for minwage_annual
model10 <- lm(welfare3 ~ tot_avg + tot_avg_quad + minority_share_log + minwage_annual, data = df3)
summary(model10)
df4 <- read_dta("updatedctsolar22.dta")
View(df4)
data3 <- read_dta("updatedctsolar22.dta")
df3 <- data3[-1, ]
View(df3)
colnames(df4)
View(df4)
data3 <- read_dta("updatedctsolar22.dta")
df4 <- data3[-1, ]
# estimate the initial linear regression model
model11 <- lm(solar_systems ~ pop + hhmedincome2020 + distressed + pop_density + votefortrump2020, data = CTsolar)
# estimate the initial linear regression model
model11 <- lm(solar_systems ~ pop + hhmedincome2020 + distressed + pop_density + votefortrump2020, data = df4)
# save the results
summary(model11)
# scatterplot of solar_systems against pop
ggplot(df4, aes(x = pop, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against hhmedincome2020
ggplot(df4, aes(x = hhmedincome2020, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against pop_density
ggplot(df4, aes(x = pop_density, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against votefortrump2020
ggplot(df4, aes(x = votefortrump2020, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against pop
ggplot(df4, aes(x = pop, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against hhmedincome2020
ggplot(df4, aes(x = hhmedincome2020, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against pop_density
ggplot(df4, aes(x = pop_density, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against pop
ggplot(df4, aes(x = pop, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against hhmedincome2020
ggplot(df4, aes(x = hhmedincome2020, y = solar_systems)) +
geom_point()
# scatterplot of solar_systems against pop_density
ggplot(df4, aes(x = pop_density, y = solar_systems)) +
geom_point()
# Create the transformed variables
df4$log_pop <- log(df4$pop)
df4$exp_income <- exp(-df4$hhmedincome2020)
# Estimate the linear model with transformed variables
model12 <- lm(solar_systems ~ log_pop + areasqmi + renteroccupied + totalhousing + whitepop + distressed + pop_density + pct_white + pct_rental + exp_income + votefortrump2020, data = df4)
summary(model12)
# Create the transformed variables
df4$log_pop <- log(df4$pop)
df4$exp_income <- exp(-df4$hhmedincome2020)
# Estimate the linear model with transformed variables
model12 <- lm(solar_systems ~ log_pop + exp_income + distressed + pop_density + votefortrump2020, data = df4)
summary(model12)
# Create the transformed variables
df4$log_pop <- log(df4$pop)
CTsolar$hhmedincome2020_recip <- 1/CTsolar$hhmedincome2020
# Create the transformed variables
df4$log_pop <- log(df4$pop)
df4$hhmedincome2020_recip <- 1/df4$hhmedincome2020
# Estimate the linear model with transformed variables
model12 <- lm(solar_systems ~ log_pop + hhmedincome2020_recip + distressed + pop_density + votefortrump2020, data = df4)
summary(model12)
summary(model11)
summary(model12)
# scatterplot of solar_systems against hhmedincome2020
ggplot(df4, aes(x = distressed, y = solar_systems)) +
geom_point()
model12 <- lm(solar_systems ~ log_pop + hhmedincome2020 +  hhmedincome2020_quad + distressed + pop_density + votefortrump2020, data = df4)
df4$hhmedincome2020_quad <- df4$hhmedincome2020^2
model12 <- lm(solar_systems ~ log_pop + hhmedincome2020 +  hhmedincome2020_quad + distressed + pop_density + votefortrump2020, data = df4)
summary(model12)
model11 <- lm(solar_systems ~ pop + hhmedincome2020 + distressed + pop_density + votefortrump2020, data = df4)
summary(model11)
summary(model12)
